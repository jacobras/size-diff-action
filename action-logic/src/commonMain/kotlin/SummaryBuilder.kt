import kotlin.math.absoluteValue

object SummaryBuilder {

    fun buildDiff(path: String, existingSizeBytes: Long, newSizeBytes: Long): String {
        return buildString {
            val extension = path.substringAfterLast(".")
            val formattedExistingSize = formatSize(existingSizeBytes)
            val formattedNewSize = formatSize(newSizeBytes)
            val diffBytes = newSizeBytes - existingSizeBytes
            val formattedDiff = formatSize(diffBytes.absoluteValue)

            appendLine("**ðŸ“¦ Previous .$extension size:** $formattedExistingSize")
            appendLine("**ðŸ“¦ New .$extension size:** $formattedNewSize")
            appendLine()

            when {
                diffBytes == 0L -> {
                    appendLine("File size does not change.")
                }

                diffBytes > 0 -> {
                    appendLine("ðŸ”¼ File size **increases by $formattedDiff**")
                }

                diffBytes < 0 -> {
                    appendLine("ðŸ”½ File size **decreases by $formattedDiff**")
                }
            }

            appendLine()
            append("<sup>_Generated by `jacobras/size-diff-action`_</sup>")
        }
    }

    private fun formatSize(bytes: Long): String {
        return when {
            bytes < 1024 -> "$bytes bytes"
            bytes < 1024 * 1024 -> "${(bytes.toDouble() / 1024).roundDecimals(0)} kB"
            bytes < 1024 * 1024 * 1024 -> "${(bytes.toDouble() / 1024 / 1024).roundDecimals(1)} MB"
            else -> "unknown"
        }
    }
}