import kotlin.math.absoluteValue

object SummaryBuilder {

    fun buildDiff(
        path: String,
        existingSizeBytes: Long,
        newSizeBytes: Long,
        largeFiles: List<FileInfo>
    ): String {
        return buildString {
            if (path.isNotBlank() && existingSizeBytes > -1 && newSizeBytes > -1) {
                val extension = path.substringAfterLast(".")
                val formattedExistingSize = formatSize(existingSizeBytes)
                val formattedNewSize = formatSize(newSizeBytes)
                val diffBytes = newSizeBytes - existingSizeBytes
                val formattedDiff = formatSize(diffBytes.absoluteValue)

                appendLine("**ðŸ“¦ Previous .$extension size:** $formattedExistingSize")
                appendLine("**ðŸ“¦ New .$extension size:** $formattedNewSize")
                appendLine()

                when {
                    diffBytes == 0L -> {
                        appendLine("File size does not change.")
                    }

                    diffBytes > 0 -> {
                        appendLine("ðŸ”¼ File size **increases by $formattedDiff**")
                    }

                    diffBytes < 0 -> {
                        appendLine("ðŸ”½ File size **decreases by $formattedDiff**")
                    }
                }
            }

            if (largeFiles.isNotEmpty()) {
                if (isNotEmpty()) {
                    appendLine()
                }
                appendLine("Large files added/modified in this PR:")

                for (file in largeFiles.take(LARGE_FILES_LIST_LIMIT)) {
                    appendLine("* `${file.filename}`: ${formatSize(file.sizeBytes)}")
                }
            }

            if (isEmpty()) {
                appendLine("No large file size changes found")
            }

            appendLine()
            append("<sup>_Generated by `jacobras/size-diff-action`_</sup>")
        }
    }

    private fun formatSize(bytes: Long): String {
        return when {
            bytes < ONE_KB_BYTES -> "$bytes bytes"
            bytes < ONE_MB_BYTES -> "${(bytes.toDouble() / ONE_KB_BYTES).roundDecimals(0)} kB"
            bytes < ONE_GB_BYTES -> "${(bytes.toDouble() / ONE_MB_BYTES).roundDecimals(1)} MB"
            else -> "${(bytes.toDouble() / ONE_GB_BYTES).roundDecimals(1)} GB"
        }
    }
}

private const val LARGE_FILES_LIST_LIMIT = 100
const val ONE_KB_BYTES = 1024
const val ONE_MB_BYTES = ONE_KB_BYTES * 1024
const val ONE_GB_BYTES = ONE_MB_BYTES * 1024